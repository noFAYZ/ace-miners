generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model BlacklistStatus {
  id                       Int     @id @unique @default(autoincrement())
  nftId                    Int
  isBlacklisted            Boolean
  aceMinersContractAddress String
}

model UserData {
  id         Int     @id @unique @default(autoincrement())
  ethAddress String  @unique
  kdaWallet  String?
  ltcWallet  String?
  ckbWallet  String?
}

model DropData {
  id           String  @id @unique @default(cuid())
  dropId       Int     @unique @default(autoincrement())
  eachLTC      String
  eachKDA      String
  eachCKB      String
  eachBoostLTC String?
}

model Nft {
  id           String     @id @unique @default(cuid())
  nftId        Int
  collectionNo String
  collectionId Collection @relation(fields: [collectionNo], references: [id])
}

model Collection {
  id              String @id @unique @default(cuid())
  contractAddress String @unique
  collectionNo    Int    @unique @default(autoincrement())
  nftIds          Nft[]
}

model ClaimRequests {
  id               String  @id @unique @default(cuid())
  claimRequestId   String
  nftId            Int
  contractAddress  String
  isClaimed        Boolean
  requestStatus    String
  holderEthAddress String
  dropId           Int
  eachLTC          String
  eachKDA          String
  eachCKB          String

  @@index([claimRequestId])
}

model ClaimRequestStatus {
  id                  String  @id @unique @default(cuid())
  claimRequestId      String  @unique
  requestStatus       String
  holderEthAddress    String
  LTC                 Boolean
  KDA                 Boolean
  CKB                 Boolean
  CkbHash             String?
  KdaHash             String?
  LtcHash             String?
  boostClaimRequestId String? @unique

  @@index([claimRequestId])
}

model ClaimRequestsBoost {
  id               String  @id @unique @default(cuid())
  claimRequestId   String
  nftId            Int
  contractAddress  String
  isClaimed        Boolean
  requestStatus    String
  holderEthAddress String
  dropId           Int
  eachLTC          String

  @@index([claimRequestId])
}

model MiningData {
  id   String @id @unique @default(cuid())
  stat Int    @unique @default(autoincrement())
  LTC  String
  KDA  String
  CKB  String

  @@index([stat])
}

model BlacklistStatusKaspa {
  id                       Int     @id @unique @default(autoincrement())
  nftId                    Int
  isBlacklisted            Boolean
  aceMinersContractAddress String
}

model UserDataKaspa {
  id          Int     @id @unique @default(autoincrement())
  ethAddress  String  @unique
  kaspaWallet String?
}

model DropDataKaspa {
  id            String  @id @unique @default(cuid())
  dropId        Int     @unique @default(autoincrement())
  eachKAS       String
  eachBoostKAS  String?
  eachBoost2KAS String?
}

model ClaimRequestsKaspa {
  id               String  @id @unique @default(cuid())
  claimRequestId   String
  nftId            Int
  contractAddress  String
  isClaimed        Boolean
  requestStatus    String
  holderEthAddress String
  dropId           Int
  eachKAS          String

  @@index([claimRequestId])
}

model ClaimRequestStatusKaspa {
  id               String  @id @unique @default(cuid())
  claimRequestId   String  @unique
  requestStatus    String
  holderEthAddress String
  KAS              Boolean
  KasHash          String?

  @@index([claimRequestId])
}

model MiningDataKaspa {
  id       String  @id @unique @default(cuid())
  stat     Int     @unique @default(autoincrement())
  KAS      String
  KASturbo String?

  @@index([stat])
}

model ClaimRequestsBoostKaspa {
  id               String  @id @unique
  claimRequestId   String
  nftId            Int
  contractAddress  String
  isClaimed        Boolean
  requestStatus    String
  holderEthAddress String
  dropId           Int
  eachKAS          String

  @@index([claimRequestId])
}

model ClaimRequestsBoost2Kaspa {
  id               String  @id @unique
  claimRequestId   String
  nftId            Int
  contractAddress  String
  isClaimed        Boolean
  requestStatus    String
  holderEthAddress String
  dropId           Int
  eachKAS          String

  @@index([claimRequestId])
}
